require("dotenv").config()
import { createClient } from "@supabase/supabase-js"
import { Bot, InlineKeyboard, webhookCallback } from "grammy"
const questions = require("../handlers/questions.js")
const ideasWithEmojis = require("../handlers/ideasWithEmojis.js")
const setMood = require("../handlers/setMood.js")
const quotes = require("../handlers/quotes.js")
const js = require("../handlers/js.js")
const bk = require("../handlers/bk.js")
const tr = require("../handlers/tr.js")

const supabase = createClient(
	"https://fkwivycaacgpuwfvozlp.supabase.co", // URL –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Supabase
	"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZrd2l2eWNhYWNncHV3ZnZvemxwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzM5MDc4MTEsImV4cCI6MjA0OTQ4MzgxMX0.44dYay0RWos4tqwuj6H-ylqN4TrAIabeQLNzBn6Xuy0", // –í–∞—à –∫–ª—é—á API Supabase
)

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Ç—Ä–∞–¥–∏—Ü–∏–π
// const traditions = [
// 	"–¢—Ä–∞–¥–∏—Ü–∏—è 1",
// 	"–¢—Ä–∞–¥–∏—Ü–∏—è 2",
// 	"–¢—Ä–∞–¥–∏—Ü–∏—è 3",
// 	"–¢—Ä–∞–¥–∏—Ü–∏—è 4",
// 	"–¢—Ä–∞–¥–∏—Ü–∏—è 5",
// 	"–¢—Ä–∞–¥–∏—Ü–∏—è 6",
// 	"–¢—Ä–∞–¥–∏—Ü–∏—è 7",
// 	"–¢—Ä–∞–¥–∏—Ü–∏—è 8",
// 	"–¢—Ä–∞–¥–∏—Ü–∏—è 9",
// 	"–¢—Ä–∞–¥–∏—Ü–∏—è 10",
// 	"–¢—Ä–∞–¥–∏—Ü–∏—è 11",
// 	"–¢—Ä–∞–¥–∏—Ü–∏—è 12",
// ]

const token = process.env.TOKEN
if (!token) throw new Error("TOKEN is unset")

const bot = new Bot(token)

let messageIds = new Map() // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
const sendMessage = async (ctx, text, options = {}) => {
	try {
		const message = await ctx.reply(text, { ...options, parse_mode: "HTML" }) // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown
		const chatId = ctx.chat.id
		const messageId = message.message_id

		if (!messageIds.has(chatId)) {
			messageIds.set(chatId, [messageId])
		} else {
			messageIds.get(chatId).push(messageId)
		}
	} catch (error) {
		console.error("Error sending message:", error.toString())
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞)
const deletePreviousMessages = async ctx => {
	const chatId = ctx.chat.id
	const commandsList = ["/bk", "/q", "/tr", "/js", "/idea", "/set", "/b"] // –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	if (ctx.message && ctx.message.text) {
		const text = ctx.message.text

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –≤ —Å–ø–∏—Å–∫–µ
		if (commandsList.some(command => text.startsWith(command))) {
			try {
				await ctx.api.deleteMessage(chatId, ctx.message.message_id) // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
			} catch (error) {
				console.error("Error deleting command message:", error.toString()) // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
			}
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
const getRandomQuestion = () => {
	return questions[Math.floor(Math.random() * questions.length)]
}

// –û–±—ä–µ–∫—Ç —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
const commands = {
	// "/q": async (ctx, mention) => {
	// 	const question = questions[Math.floor(Math.random() * questions.length)]
	// 	await sendMessage(
	// 		ctx,
	// 		`(–∫–æ–º–∞–Ω–¥–∞ /q)\nüéÅ –†–∞–Ω–¥–æ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è ${mention}:\n\n<b>${question}</b>`,
	// 	)
	// },
	"/idea": async (ctx, mention) => {
		const idea = ideasWithEmojis[Math.floor(Math.random() * ideasWithEmojis.length)]
		await sendMessage(
			ctx,
			`(–∫–æ–º–∞–Ω–¥–∞ /idea)\nüí° ${mention}, –¥–ª—è –≤–∞—Å –Ω–∞—à–ª–∞—Å—å –∏–¥–µ—è:\n\n<b>${idea}</b>`,
		)
	},
	"/set": async (ctx, mention) => {
		const mood = setMood[Math.floor(Math.random() * setMood.length)]
		await sendMessage(
			ctx,
			`(–∫–æ–º–∞–Ω–¥–∞ /set)\nüë§ ${mention}, –≤–∞—à–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –¥–µ–Ω—å:\n\n<b>${mood}</b>`,
		)
	},
	"/js": async (ctx, mention) => {
		const mood = js[Math.floor(Math.random() * js.length)]
		await sendMessage(
			ctx,
			`(–∫–æ–º–∞–Ω–¥–∞ /js)\nüòÇ ${mention}, –≤–µ–ª–∏–∫–∞—è —Ü–∏—Ç–∞—Ç–∞:\n\n<b>${mood}</b> \n\n<i>-–î–∂–µ–π—Å–æ–Ω –°—Ç–µ—Ç—Ö–µ–º</i>`,
		)
	},
	"/bk": async (ctx, mention) => {
		const mood = bk[Math.floor(Math.random() * bk.length)]
		await sendMessage(
			ctx,
			`(–∫–æ–º–∞–Ω–¥–∞ /bk)\nüë§ ${mention}, –∞–¥–∞–ø—Ç–∞—Ü–∏—è:\n\n<b>${mood}</b> \n\n<i>-–ë–ö–ê–ê</i>`,
		)
	},

	// "/tr": async ctx => {
	// 	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	// 	const inlineKeyboard = new InlineKeyboard()

	// 	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
	// 	traditions.forEach((tradition, index) => {
	// 		inlineKeyboard.add({ text: tradition, callback_data: `tradition_${index}` })

	// 		// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä—è–¥ –∫–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏
	// 		if ((index + 1) % 2 === 0) {
	// 			inlineKeyboard.row() // –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ä—è–¥ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏
	// 		}
	// 	})

	// 	await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–¥–∏—Ü–∏—é –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", { reply_markup: inlineKeyboard })
	// },
	"/b": async (ctx, mention) => {
		const quote = quotes[Math.floor(Math.random() * quotes.length)]
		await sendMessage(
			ctx,
			`(–∫–æ–º–∞–Ω–¥–∞ /b)\nüó£ ${mention}, –æ–¥–Ω–∞ –∏–∑ —Ü–∏—Ç–∞—Ç:\n\n<b>${quote}</b> \n\n<i>-–ö–æ–Ω—Ñ—É—Ü–∏–π</i>`,
		)
	},
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
// bot.on("callback_query:data", async ctx => {
// 	const callbackData = ctx.callbackQuery.data

// 	if (callbackData.startsWith("tradition_")) {
// 		const index = parseInt(callbackData.split("_")[1]) // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç—Ä–∞–¥–∏—Ü–∏–∏

// 		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–¥–∏—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
// 		const traditionText = tr[index]

// 		await ctx.answerCallbackQuery() // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ

// 		await sendMessage(ctx, traditionText) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–∞–¥–∏—Ü–∏–∏
// 	}
// })

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /q
bot.command("q", async ctx => {
	const mention = ctx.from.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	const question = getRandomQuestion() // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å

	// –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	const keyboard = new InlineKeyboard().text("–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", "new_question")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	await ctx.reply(`üéÅ –†–∞–Ω–¥–æ–º–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è ${mention}:\n\n<b>${question}</b>`, {
		parse_mode: "HTML",
		reply_markup: keyboard,
	})
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å"
bot.callbackQuery("new_question", async ctx => {
	const newQuestion = getRandomQuestion() // –ù–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å

	try {
		// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		await ctx.deleteMessage()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
		const keyboard = new InlineKeyboard().text("–î—Ä—É–≥–∞—è —Ç–µ–º–∞", "new_question")
		await ctx.reply(`üéÅ –ù–æ–≤–∞—è —Ç–µ–º–∞:\n\n<b>${newQuestion}</b>`, {
			parse_mode: "HTML",
			reply_markup: keyboard,
		})
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ", error)
	}
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
async function getUserCards(userId) {
	const { data, error } = await supabase.from("posts").select("*").eq("userId", userId) // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏, –≥–¥–µ userId —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	if (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:", error)
		return []
	}
	return data
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ Supabase
async function deleteCard(cardId) {
	const { data, error } = await supabase.from("posts").delete().eq("id", cardId) // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º id

	if (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", error)
		return false
	}
	return true
}

bot.command("/get_posts", async ctx => {
	const userId = ctx.from.id
	// –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
	const cards = await getUserCards(userId)

	if (cards.length === 0) {
		ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
	const keyboard = cards.map(card => [
		{
			text: `–ö–∞—Ä—Ç–æ—á–∫–∞ ${card.id}: ${card.desc}`,
			callback_data: `view_card_${card.id}`,
		},
		{
			text: "–£–¥–∞–ª–∏—Ç—å",
			callback_data: `delete_card_${card.id}`,
		},
	])

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
	ctx.reply("–í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:", {
		reply_markup: {
			inline_keyboard: keyboard,
		},
	})
})

bot.command("/get_posts", async ctx => {
	const userId = ctx.from.id
	const cardId = ctx.match[1]

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	const cards = await getUserCards(userId)

	const card = cards.find(card => card.id.toString() === cardId.toString())

	if (!card) {
		ctx.reply("–≠—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
		return
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
	const success = await deleteCard(cardId)

	if (success) {
		ctx.reply("–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
	} else {
		ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
	}
})

bot.command("/get_posts", async ctx => {
	const cardId = ctx.match[1]

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–µ
	const { data, error } = await supabase
		.from("posts")
		.select("*")
		.eq("id", cardId)
		.single() // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º id

	if (error || !data) {
		ctx.reply("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
		return
	}

	ctx.reply(`–ö–∞—Ä—Ç–æ—á–∫–∞ ${data.id}:\n${data.desc}`)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message:text", async ctx => {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
	if (ctx.chat.type !== "private") {
		console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
		return // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ª–∏—á–Ω—ã–π —á–∞—Ç
	}

	const userMessage = ctx.message.text // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	const userId = ctx.message.from.id // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	try {
		// –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
		const { data, error } = await supabase
			.from("posts") // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ 'posts'
			.insert([
				{
					desc: userMessage, // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					userId: userId,
				},
			])

		if (error) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ Supabase:", error.message)
			ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
			return
		}

		console.log("–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:", userMessage)
		ctx.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–∫–∞!")
	} catch (error) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Supabase:", error)
		ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
	}
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async ctx => {
	if (!ctx.message || !ctx.message.text) {
		console.log("Received a non-text message or an undefined message.")
		return // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
	}

	const text = ctx.message.text.toLowerCase()
	const firstName = ctx.from.first_name
	const mention = ctx.from.username
		? `@${ctx.from.username}`
		: `<a href="tg://user?id=${ctx.from.id}">${firstName}</a>` // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Å—Å—ã–ª–∫—É –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	// –ú–∞—Å—Å–∏–≤ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
	const responses = {
		—Å–æ–±—Ä–∞–Ω–∏—è: `${mention}, –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ –æ "<b>—Å–æ–±—Ä–∞–Ω–∏—è</b>"?\n<a href="https://t.me/community_pa/3384">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏–π</a>`,
		"–∫–æ–≥–¥–∞ –≥—Ä—É–ø–ø–∞": `${mention}, –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ "<b>–∫–æ–≥–¥–∞ –≥—Ä—É–ø–ø–∞</b>"?\n<a href="https://t.me/community_pa/3384">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏–π</a>`,
		"–∫–æ–≥–¥–∞ –≥—Ä—É–ø–ø–∞?": `${mention}, –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ "<b>–∫–æ–≥–¥–∞ –≥—Ä—É–ø–ø–∞?</b>"?\n<a href="https://t.me/ community_pa/3384">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏–π</a>`,
		"–∫–æ–≥–¥–∞ —Å–æ–±—Ä–∞–Ω–∏–µ?": `${mention}, –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ "<b>–∫–æ–≥–¥–∞ —Å–æ–±—Ä–∞–Ω–∏–µ?</b>"?\n<a href="https://t.me/community_pa/3384">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏–π</a>`,
		"–∫–æ–≥–¥–∞ —Å–æ–±—Ä–∞–Ω–∏–µ": `${mention}, –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ "<b>–∫–æ–≥–¥–∞ —Å–æ–±—Ä–∞–Ω–∏–µ</b>"?\n<a href="https://t.me/community_pa/3384">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏–π</a>`,
		"–∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞?": `${mention}, –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ "<b>–∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞?</b>"?\n<a href="https://t.me/community_pa/3384">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏–π</a>`,
		—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: `${mention}, –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ –æ "<b>—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>"?\n<a href="https://t.me/community_pa/3384">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏–π</a>`,
		"–∫–æ–≥–¥–∞ —Å–ª–µ–¥ –≥—Ä—É–ø–ø–∞?": `${mention}, –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ "<b>–∫–æ–≥–¥–∞ —Å–ª–µ–¥ –≥—Ä—É–ø–ø–∞?</b>"?\n<a href="https://t.me/community_pa/3384">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏–π</a>`,
		—Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—é: `${mention}, –≤—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ "<b>—Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—é</b>"?\n<a href="https://t.me/community_pa/3384">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–∏–π</a>`,
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –∏ –æ—Ç–≤–µ—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
	// for (const keyword in responses) {
	// 	if (text.includes(keyword)) {
	// 		await sendMessage(ctx, responses[keyword])
	// 		return // –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
	// 	}
	// }

	// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
	// await deletePreviousMessages(ctx)

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –æ–±—ä–µ–∫—Ç–µ
	if (commands[text]) {
		await commands[text](ctx, mention)
	}
})

export default webhookCallback(bot, "http")
